openapi: 3.0.1
info:
  title: REST API
  contact:
    name: API BRICKS LTD
    url: https://www.coinapi.io
    email: support@apibricks.io
  license:
    name: MIT License
    url: https://github.com/coinapi/coinapi-sdk/blob/master/LICENSE
  version: v1
servers:
  - url: https://rest.coinapi.io
paths:
  /v1/assets:
    get:
      tags:
        - Metadata
      summary: List all assets
      description: "Retrieves all assets.\r\n            \r\n:::info\r\nOur asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).\r\n:::\r\n            \r\n:::info\r\nProperties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\r\n:::"
      parameters:
        - name: filter_asset_id
          in: query
          description: 'Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. `BTC;ETH`).'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
  '/v1/assets/{asset_id}':
    get:
      tags:
        - Metadata
      summary: List all assets by asset ID
      parameters:
        - name: asset_id
          in: path
          description: The asset ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "name": "Bitcoin",
    "type_is_crypto": 1,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:55:07.6724523Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:17.8592413Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:11.8220000Z",
    "data_symbols_count": 22711,
    "volume_1hrs_usd": 102894431436.49,
    "volume_1day_usd": 2086392323256.16,
    "volume_1mth_usd": 57929168359984.54,
    "price_usd": 9166.207274778093436220194944,
    "chain_addresses": [
      {
        "chain_id": "ARBITRUM",
        "network_id": "MAINNET",
        "address": "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f"
      },
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  },
  {
    "asset_id": "USD",
    "name": "US Dollar",
    "type_is_crypto": 0,
    "data_quote_start": "2014-02-24T17:43:05.0000000Z",
    "data_quote_end": "2019-11-03T17:54:49.3807706Z",
    "data_orderbook_start": "2014-02-24T17:43:05.0000000Z",
    "data_orderbook_end": "2019-11-03T17:55:13.1863931Z",
    "data_trade_start": "2010-07-17T23:09:17.0000000Z",
    "data_trade_end": "2019-11-03T17:55:07.7870000Z",
    "data_symbols_count": 10728,
    "volume_1hrs_usd": 9466454016.52,
    "volume_1day_usd": 221580758173.49,
    "volume_1mth_usd": 11816685174661.70,
    "price_usd": 1.0,
    "chain_addresses": [
      {
        "chain_id": "ETHEREUM",
        "network_id": "MAINNET",
        "address": "0xd233d1f6fd11640081abb8db125f722b5dc729dc"
      }
    ],
    "data_start": "2010-07-17",
    "data_end": "2019-11-03"
  }
]
  '/v1/assets/icons/{size}':
    get:
      tags:
        - Metadata
      summary: List all asset icons
      description: Gets the list of icons (of the given size) for all the assets.
      parameters:
        - name: size
          in: path
          description: The size of the icons.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/f231d7382689406f9a50dde841418c64.png"
  },
  {
    "asset_id": "ETH",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/04836ff3bc4d4d95820e0155594dca86.png"
  },
  {
    "asset_id": "USD",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4873707f25fe4de3b4bca6fa5c631011.png"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/f231d7382689406f9a50dde841418c64.png"
  },
  {
    "asset_id": "ETH",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/04836ff3bc4d4d95820e0155594dca86.png"
  },
  {
    "asset_id": "USD",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4873707f25fe4de3b4bca6fa5c631011.png"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/f231d7382689406f9a50dde841418c64.png"
  },
  {
    "asset_id": "ETH",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/04836ff3bc4d4d95820e0155594dca86.png"
  },
  {
    "asset_id": "USD",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4873707f25fe4de3b4bca6fa5c631011.png"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "asset_id": "BTC",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/f231d7382689406f9a50dde841418c64.png"
  },
  {
    "asset_id": "ETH",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/04836ff3bc4d4d95820e0155594dca86.png"
  },
  {
    "asset_id": "USD",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4873707f25fe4de3b4bca6fa5c631011.png"
  }
]
  '/v1/exchangerate/{asset_id_base}/{asset_id_quote}':
    get:
      tags:
        - Exchange Rates
      summary: Get specific rate
      description: "Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.\r\n            \r\n:::info\r\nIf you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.\r\n:::"
      operationId: Get specific rate
      parameters:
        - name: asset_id_base
          in: path
          description: Requested exchange rate base asset identifier (from the Metadata -> Assets)
          required: true
          schema:
            type: string
        - name: asset_id_quote
          in: path
          description: Requested exchange rate quote asset identifier (from the Metadata -> Assets)
          required: true
          schema:
            type: string
        - name: time
          in: query
          description: 'Time at which exchange rate is calculated (optional, if not supplied then current rate is returned)'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRate'
              examples:
                Example response:
                  value: {
  "time": "2025-05-13T06:03:48.6878017Z",
  "asset_id_base": "BTC",
  "asset_id_quote": "USD",
  "rate": 10000.0
}
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRate'
              examples:
                Example response:
                  value: {
  "time": "2025-05-13T06:03:48.6878017Z",
  "asset_id_base": "BTC",
  "asset_id_quote": "USD",
  "rate": 10000.0
}
            text/json:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRate'
              examples:
                Example response:
                  value: {
  "time": "2025-05-13T06:03:48.6878017Z",
  "asset_id_base": "BTC",
  "asset_id_quote": "USD",
  "rate": 10000.0
}
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRate'
              examples:
                Example response:
                  value: {
  "time": "2025-05-13T06:03:48.6878017Z",
  "asset_id_base": "BTC",
  "asset_id_quote": "USD",
  "rate": 10000.0
}
  '/v1/exchangerate/{asset_id_base}':
    get:
      tags:
        - Exchange Rates
      summary: Get all current rates
      description: "Get the current exchange rate between requested asset and all other assets.\r\n            \r\n:::info\r\nIf you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.\r\n:::\r\n            \r\n:::info\r\nYou can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);\r\n:::"
      parameters:
        - name: asset_id_base
          in: path
          description: Requested exchange rates base asset identifier (from the Metadata -> Assets)
          required: true
          schema:
            type: string
        - name: filter_asset_id
          in: query
          description: Comma or semicolon delimited asset identifiers used to filter response (optional)
          schema:
            type: string
        - name: invert
          in: query
          description: 'True will invert all the rates (optional, if true then rates will be calculated as `rate = 1 / actual_rate` eg. `USD/BTC` as `BTC/USD`)'
          schema:
            type: boolean
            default: false
        - name: time
          in: query
          description: Time for historical rates (optional)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRates`1'
              examples:
                Example response:
                  value: {
  "asset_id_base": "BTC",
  "rates": [
    {
      "time": "2017-08-09T14:31:37.0520000Z",
      "asset_id_quote": "USD",
      "rate": 3258.8875417798037784035133948
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "EUR",
      "rate": 2782.5255080599273092901331567
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "CNY",
      "rate": 21756.295595926054627342411501
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "GBP",
      "rate": 2509.6024203799580199765804823
    }
  ]
}
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRates`1'
              examples:
                Example response:
                  value: {
  "asset_id_base": "BTC",
  "rates": [
    {
      "time": "2017-08-09T14:31:37.0520000Z",
      "asset_id_quote": "USD",
      "rate": 3258.8875417798037784035133948
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "EUR",
      "rate": 2782.5255080599273092901331567
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "CNY",
      "rate": 21756.295595926054627342411501
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "GBP",
      "rate": 2509.6024203799580199765804823
    }
  ]
}
            text/json:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRates`1'
              examples:
                Example response:
                  value: {
  "asset_id_base": "BTC",
  "rates": [
    {
      "time": "2017-08-09T14:31:37.0520000Z",
      "asset_id_quote": "USD",
      "rate": 3258.8875417798037784035133948
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "EUR",
      "rate": 2782.5255080599273092901331567
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "CNY",
      "rate": 21756.295595926054627342411501
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "GBP",
      "rate": 2509.6024203799580199765804823
    }
  ]
}
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.ExchangeRates`1'
              examples:
                Example response:
                  value: {
  "asset_id_base": "BTC",
  "rates": [
    {
      "time": "2017-08-09T14:31:37.0520000Z",
      "asset_id_quote": "USD",
      "rate": 3258.8875417798037784035133948
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "EUR",
      "rate": 2782.5255080599273092901331567
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "CNY",
      "rate": 21756.295595926054627342411501
    },
    {
      "time": "2017-08-09T14:31:36.7570000Z",
      "asset_id_quote": "GBP",
      "rate": 2509.6024203799580199765804823
    }
  ]
}
  /v1/exchangerate/history/periods:
    get:
      tags:
        - Exchange Rates
      summary: Timeseries periods
      description: "You can also obtain historical exchange rates of any asset pair, grouped into time periods.\r\nGet full list of supported time periods available for requesting exchange rates historical timeseries data.\r\n            \r\n## Timeseries periods\r\nTime unit |\tPeriod identifiers\r\n--- | ---\r\nSecond | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC\r\nMinute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN\r\nHour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS\r\nDay | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY"
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "30MIN",
    "length_seconds": 1800,
    "length_months": 0,
    "unit_count": 30,
    "unit_name": "minute",
    "display_name": "30 Minutes"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "30MIN",
    "length_seconds": 1800,
    "length_months": 0,
    "unit_count": 30,
    "unit_name": "minute",
    "display_name": "30 Minutes"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "30MIN",
    "length_seconds": 1800,
    "length_months": 0,
    "unit_count": 30,
    "unit_name": "minute",
    "display_name": "30 Minutes"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "30MIN",
    "length_seconds": 1800,
    "length_months": 0,
    "unit_count": 30,
    "unit_name": "minute",
    "display_name": "30 Minutes"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  }
]
  '/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history':
    get:
      tags:
        - Exchange Rates
      summary: Timeseries data
      description: Get the historical exchange rates between two assets in the form of the timeseries.
      parameters:
        - name: asset_id_base
          in: path
          description: Requested exchange rates base asset identifier (from the Metadata -> Assets)
          required: true
          schema:
            type: string
        - name: asset_id_quote
          in: path
          description: Requested exchange rates base asset identifier (from the Metadata -> Assets)
          required: true
          schema:
            type: string
        - name: period_id
          in: query
          description: 'Identifier of requested timeseries period (required, e.g. `5SEC` or `1HRS`)'
          schema:
            type: string
        - name: time_start
          in: query
          description: Timeseries starting time in ISO 8601 (required)
          schema:
            type: string
        - name: time_end
          in: query
          description: Timeseries ending time in ISO 8601 (required)
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ExchangeRatesTimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2016-01-01T00:00:00.0000000Z",
    "time_period_end": "0001-01-01T00:00:00.0000000Z",
    "time_open": "2016-01-01T00:00:00.0000000Z",
    "time_close": "2016-01-01T00:00:00.0000000Z",
    "rate_open": 430.586617904731,
    "rate_high": 430.586617904731,
    "rate_low": 430.586617904731,
    "rate_close": 430.586617904731
  },
  {
    "time_period_start": "2016-01-01T00:01:00.0000000Z",
    "time_period_end": "2016-01-01T00:02:00.0000000Z",
    "time_open": "2016-01-01T00:01:00.0000000Z",
    "time_close": "2016-01-01T00:01:00.0000000Z",
    "rate_open": 430.38999999999993,
    "rate_high": 430.38999999999993,
    "rate_low": 430.38999999999993,
    "rate_close": 430.38999999999993
  },
  {
    "time_period_start": "2016-01-01T00:02:00.0000000Z",
    "time_period_end": "2016-01-01T00:03:00.0000000Z",
    "time_open": "2016-01-01T00:02:00.0000000Z",
    "time_close": "2016-01-01T00:02:00.0000000Z",
    "rate_open": 430.6522189770523,
    "rate_high": 430.6522189770523,
    "rate_low": 430.6522189770523,
    "rate_close": 430.6522189770523
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ExchangeRatesTimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2016-01-01T00:00:00.0000000Z",
    "time_period_end": "0001-01-01T00:00:00.0000000Z",
    "time_open": "2016-01-01T00:00:00.0000000Z",
    "time_close": "2016-01-01T00:00:00.0000000Z",
    "rate_open": 430.586617904731,
    "rate_high": 430.586617904731,
    "rate_low": 430.586617904731,
    "rate_close": 430.586617904731
  },
  {
    "time_period_start": "2016-01-01T00:01:00.0000000Z",
    "time_period_end": "2016-01-01T00:02:00.0000000Z",
    "time_open": "2016-01-01T00:01:00.0000000Z",
    "time_close": "2016-01-01T00:01:00.0000000Z",
    "rate_open": 430.38999999999993,
    "rate_high": 430.38999999999993,
    "rate_low": 430.38999999999993,
    "rate_close": 430.38999999999993
  },
  {
    "time_period_start": "2016-01-01T00:02:00.0000000Z",
    "time_period_end": "2016-01-01T00:03:00.0000000Z",
    "time_open": "2016-01-01T00:02:00.0000000Z",
    "time_close": "2016-01-01T00:02:00.0000000Z",
    "rate_open": 430.6522189770523,
    "rate_high": 430.6522189770523,
    "rate_low": 430.6522189770523,
    "rate_close": 430.6522189770523
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ExchangeRatesTimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2016-01-01T00:00:00.0000000Z",
    "time_period_end": "0001-01-01T00:00:00.0000000Z",
    "time_open": "2016-01-01T00:00:00.0000000Z",
    "time_close": "2016-01-01T00:00:00.0000000Z",
    "rate_open": 430.586617904731,
    "rate_high": 430.586617904731,
    "rate_low": 430.586617904731,
    "rate_close": 430.586617904731
  },
  {
    "time_period_start": "2016-01-01T00:01:00.0000000Z",
    "time_period_end": "2016-01-01T00:02:00.0000000Z",
    "time_open": "2016-01-01T00:01:00.0000000Z",
    "time_close": "2016-01-01T00:01:00.0000000Z",
    "rate_open": 430.38999999999993,
    "rate_high": 430.38999999999993,
    "rate_low": 430.38999999999993,
    "rate_close": 430.38999999999993
  },
  {
    "time_period_start": "2016-01-01T00:02:00.0000000Z",
    "time_period_end": "2016-01-01T00:03:00.0000000Z",
    "time_open": "2016-01-01T00:02:00.0000000Z",
    "time_close": "2016-01-01T00:02:00.0000000Z",
    "rate_open": 430.6522189770523,
    "rate_high": 430.6522189770523,
    "rate_low": 430.6522189770523,
    "rate_close": 430.6522189770523
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ExchangeRatesTimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2016-01-01T00:00:00.0000000Z",
    "time_period_end": "0001-01-01T00:00:00.0000000Z",
    "time_open": "2016-01-01T00:00:00.0000000Z",
    "time_close": "2016-01-01T00:00:00.0000000Z",
    "rate_open": 430.586617904731,
    "rate_high": 430.586617904731,
    "rate_low": 430.586617904731,
    "rate_close": 430.586617904731
  },
  {
    "time_period_start": "2016-01-01T00:01:00.0000000Z",
    "time_period_end": "2016-01-01T00:02:00.0000000Z",
    "time_open": "2016-01-01T00:01:00.0000000Z",
    "time_close": "2016-01-01T00:01:00.0000000Z",
    "rate_open": 430.38999999999993,
    "rate_high": 430.38999999999993,
    "rate_low": 430.38999999999993,
    "rate_close": 430.38999999999993
  },
  {
    "time_period_start": "2016-01-01T00:02:00.0000000Z",
    "time_period_end": "2016-01-01T00:03:00.0000000Z",
    "time_open": "2016-01-01T00:02:00.0000000Z",
    "time_close": "2016-01-01T00:02:00.0000000Z",
    "rate_open": 430.6522189770523,
    "rate_high": 430.6522189770523,
    "rate_low": 430.6522189770523,
    "rate_close": 430.6522189770523
  }
]
  /v1/exchanges:
    get:
      tags:
        - Metadata
      summary: List all exchanges
      description: "Get a detailed list of exchanges provided by the system.\r\n            \r\n:::info\r\nProperties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\r\n:::"
      parameters:
        - name: filter_exchange_id
          in: query
          description: 'Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. `BITSTAMP;GEMINI`)'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
  '/v1/exchanges/{exchange_id}':
    get:
      tags:
        - Metadata
      summary: List all exchanges by exchange_id
      parameters:
        - name: exchange_id
          in: path
          description: The ID of the exchange.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Exchange'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "OKCOINCNY",
    "website": "https://www.okcoin.cn/",
    "name": "OKCoin CNY",
    "data_quote_start": "2015-02-15T12:53:50.3430000Z",
    "data_quote_end": "2018-03-09T23:34:52.5800000Z",
    "data_orderbook_start": "2015-02-15T12:53:50.3430000Z",
    "data_orderbook_end": "2018-03-09T23:34:52.5800000Z",
    "data_trade_start": "2013-06-12T14:24:24.0000000Z",
    "data_trade_end": "2017-11-01T16:30:39.7077259Z",
    "data_symbols_count": 2,
    "volume_1hrs_usd": 0.0,
    "volume_1day_usd": 0.0,
    "volume_1mth_usd": 0.0,
    "rank": 1
  },
  {
    "exchange_id": "HUOBI",
    "website": "https://www.huobi.com/",
    "name": "Huobi (HBUS)",
    "data_quote_start": "2015-03-29T21:46:06.2630000Z",
    "data_quote_end": "2019-11-03T18:22:29.1837496Z",
    "data_orderbook_start": "2015-03-29T21:46:06.2630000Z",
    "data_orderbook_end": "2019-11-03T18:23:53.2859878Z",
    "data_trade_start": "2015-03-29T21:46:08.7030000Z",
    "data_trade_end": "2019-11-03T18:21:48.2770000Z",
    "data_symbols_count": 403,
    "volume_1hrs_usd": 1605.80,
    "volume_1day_usd": 59957.44,
    "volume_1mth_usd": 1259508.43,
    "rank": 5
  }
]
  '/v1/exchanges/icons/{size}':
    get:
      tags:
        - Metadata
      summary: List of icons for the exchanges
      parameters:
        - name: size
          in: path
          description: The size of the icons.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "CHAINCE",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/204e55dd8dab4a0d823c21f04be6be4b.png"
  },
  {
    "exchange_id": "BILAXY",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4958c92dbddd4936b1f655e5063dc782.png"
  },
  {
    "exchange_id": "BCOINSG",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/b7c77041cdef4f359b4044b2d73c7741.png"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "CHAINCE",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/204e55dd8dab4a0d823c21f04be6be4b.png"
  },
  {
    "exchange_id": "BILAXY",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4958c92dbddd4936b1f655e5063dc782.png"
  },
  {
    "exchange_id": "BCOINSG",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/b7c77041cdef4f359b4044b2d73c7741.png"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "CHAINCE",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/204e55dd8dab4a0d823c21f04be6be4b.png"
  },
  {
    "exchange_id": "BILAXY",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4958c92dbddd4936b1f655e5063dc782.png"
  },
  {
    "exchange_id": "BCOINSG",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/b7c77041cdef4f359b4044b2d73c7741.png"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Icon'
              examples:
                Example response:
                  value: [
  {
    "exchange_id": "CHAINCE",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/204e55dd8dab4a0d823c21f04be6be4b.png"
  },
  {
    "exchange_id": "BILAXY",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/4958c92dbddd4936b1f655e5063dc782.png"
  },
  {
    "exchange_id": "BCOINSG",
    "url": "https://s3.eu-central-1.amazonaws.com/bbxt-static-icons/type-id/png_16/b7c77041cdef4f359b4044b2d73c7741.png"
  }
]
  /v1/metrics/listing:
    get:
      tags:
        - Metrics
      summary: Listing of all supported metrics by CoinAPI
      description: Get all data metrics.
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Metric'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_QUANTITY",
    "description": "The liquidation quantity metric calculates the specific amount of the asset that must be sold to settle the trader's obligations and bring their position back to a manageable level. It helps ensure that the trader's losses are covered and that their account remains in good standing."
  },
  {
    "metric_id": "DERIVATIVES_LAST_PRICE",
    "description": "The last price represents the price at which the most recent trade of the derivative contract occurred. It provides traders and investors with the latest information on the market value of the derivative, allowing them to assess the current market sentiment, track price movements, and make informed decisions regarding their derivative positions. The derivatives last price metric is crucial for monitoring real-time market conditions and managing derivative trading strategies effectively."
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Metric'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_QUANTITY",
    "description": "The liquidation quantity metric calculates the specific amount of the asset that must be sold to settle the trader's obligations and bring their position back to a manageable level. It helps ensure that the trader's losses are covered and that their account remains in good standing."
  },
  {
    "metric_id": "DERIVATIVES_LAST_PRICE",
    "description": "The last price represents the price at which the most recent trade of the derivative contract occurred. It provides traders and investors with the latest information on the market value of the derivative, allowing them to assess the current market sentiment, track price movements, and make informed decisions regarding their derivative positions. The derivatives last price metric is crucial for monitoring real-time market conditions and managing derivative trading strategies effectively."
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Metric'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_QUANTITY",
    "description": "The liquidation quantity metric calculates the specific amount of the asset that must be sold to settle the trader's obligations and bring their position back to a manageable level. It helps ensure that the trader's losses are covered and that their account remains in good standing."
  },
  {
    "metric_id": "DERIVATIVES_LAST_PRICE",
    "description": "The last price represents the price at which the most recent trade of the derivative contract occurred. It provides traders and investors with the latest information on the market value of the derivative, allowing them to assess the current market sentiment, track price movements, and make informed decisions regarding their derivative positions. The derivatives last price metric is crucial for monitoring real-time market conditions and managing derivative trading strategies effectively."
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Metric'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_QUANTITY",
    "description": "The liquidation quantity metric calculates the specific amount of the asset that must be sold to settle the trader's obligations and bring their position back to a manageable level. It helps ensure that the trader's losses are covered and that their account remains in good standing."
  },
  {
    "metric_id": "DERIVATIVES_LAST_PRICE",
    "description": "The last price represents the price at which the most recent trade of the derivative contract occurred. It provides traders and investors with the latest information on the market value of the derivative, allowing them to assess the current market sentiment, track price movements, and make informed decisions regarding their derivative positions. The derivatives last price metric is crucial for monitoring real-time market conditions and managing derivative trading strategies effectively."
  }
]
  /v1/metrics/exchange/listing:
    get:
      tags:
        - Metrics
      summary: Listing of all supported exchange metrics
      description: Get data metrics for exchange.
      parameters:
        - name: metric_id
          in: query
          description: The metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: exchange_id
          in: query
          description: The exchange identifier (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "exchange_id": "BINANCEFTS"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "exchange_id": "BINANCEFTS"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "exchange_id": "BINANCEFTS"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "exchange_id": "BINANCEFTS"
  }
]
  /v1/metrics/exchange/current:
    get:
      tags:
        - Metrics
      summary: Current metrics for given exchange
      description: Get current exchange metrics values.
      parameters:
        - name: metric_id
          in: query
          description: The metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: exchange_id
          in: query
          description: The exchange identifier (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
  /v1/metrics/exchange/history:
    get:
      tags:
        - Metrics
      summary: Historical metrics for the exchange
      description: Get exchange metrics history.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          required: true
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange identifier (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
        - name: time_start
          in: query
          description: Starting time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_end
          in: query
          description: Ending time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_format
          in: query
          description: 'If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)'
          schema:
            type: string
        - name: period_id
          in: query
          description: 'Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`'
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
  /v1/metrics/symbol/listing:
    get:
      tags:
        - Metrics
      summary: Listing of all supported metrics for symbol
      description: Get data metrics for symbol.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange identifier (from the Metadata -> Exchanges)
          schema:
            type: string
        - name: symbol_id
          in: query
          description: Symbol identifier (from the Metadata -> Symbols)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
  /v1/metrics/symbol/current:
    get:
      tags:
        - Metrics
      summary: Current metrics for given symbol
      description: Get current symbol metrics.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: symbol_id
          in: query
          description: Symbol identifier (from the Metadata -> Symbols)
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange id (from the Metadata -> Exchanges)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBITUAT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_RHO",
    "value_decimal": -594.10357
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_VEGA",
    "value_decimal": 49.31013
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_THETA",
    "value_decimal": -6.14104
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "DERIVATIVES_INDEX_PRICE",
    "value_decimal": 30027.74
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBITUAT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_RHO",
    "value_decimal": -594.10357
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_VEGA",
    "value_decimal": 49.31013
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_THETA",
    "value_decimal": -6.14104
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "DERIVATIVES_INDEX_PRICE",
    "value_decimal": 30027.74
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBITUAT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_RHO",
    "value_decimal": -594.10357
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_VEGA",
    "value_decimal": 49.31013
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_THETA",
    "value_decimal": -6.14104
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "DERIVATIVES_INDEX_PRICE",
    "value_decimal": 30027.74
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBITUAT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_RHO",
    "value_decimal": -594.10357
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_VEGA",
    "value_decimal": 49.31013
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "GREEKS_THETA",
    "value_decimal": -6.14104
  },
  {
    "entry_time": "2023-06-23T12:38:48.2782698Z",
    "recv_time": "2023-06-23T12:38:48.0140000Z",
    "exchange_id": "DERIBIT",
    "symbol_id": "DERIBIT_OPT_BTC_USD_240329_80000_P",
    "metric_id": "DERIVATIVES_INDEX_PRICE",
    "value_decimal": 30027.74
  }
]
  /v1/metrics/symbol/history:
    get:
      tags:
        - Metrics
      summary: Historical metrics for symbol
      description: Get symbol metrics history.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          required: true
          schema:
            type: string
        - name: symbol_id
          in: query
          description: Symbol identifier (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: time_start
          in: query
          description: Starting time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_end
          in: query
          description: Ending time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_format
          in: query
          description: 'If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)'
          schema:
            type: string
        - name: period_id
          in: query
          description: 'Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`'
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2023-07-03T14:29:02.0000000Z",
    "time_period_end": "2023-07-03T14:29:03.0000000Z",
    "time_open": "2023-07-03T14:29:02.5699837Z",
    "time_close": "2023-07-03T14:29:02.5699837Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 30668.476938
  },
  {
    "time_period_start": "2023-07-03T14:29:03.0000000Z",
    "time_period_end": "2023-07-03T14:29:04.0000000Z",
    "time_open": "2023-07-03T14:29:03.1076159Z",
    "time_close": "2023-07-03T14:29:03.1076159Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 0.05485331
  },
  {
    "time_period_start": "2023-07-03T14:29:04.0000000Z",
    "time_period_end": "2023-07-03T14:29:05.0000000Z",
    "time_open": "2023-07-03T14:29:04.5792149Z",
    "time_close": "2023-07-03T14:29:04.9459786Z",
    "first": 0,
    "last": 0,
    "min": 0,
    "max": 0,
    "count": 0,
    "sum": 7.0257000000000005
  }
]
  /v1/metrics/asset/listing:
    get:
      tags:
        - Metrics
      summary: Listing of all supported metrics for asset
      description: Get data metrics for asset.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange identifier (from the Metadata -> Exchanges)
          schema:
            type: string
        - name: chain_id
          in: query
          description: Chain identifier
          schema:
            type: string
        - name: network_id
          in: query
          description: Network identifier
          schema:
            type: string
        - name: asset_id
          in: query
          description: Asset identifier (from the Metadata -> Assets)
          schema:
            type: string
        - name: asset_id_external
          in: query
          description: The asset external identifier
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ListingItem'
              examples:
                Example response:
                  value: [
  {
    "metric_id": "LIQUIDATION_TIME_IN_FORCE",
    "symbol_id": "BINANCEFTS_PERP_ETC_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_TYPE",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  },
  {
    "metric_id": "LIQUIDATION_ORDER_STATUS",
    "symbol_id": "BINANCEFTS_PERP_EOS_USDT",
    "exchange_id": "BINANCEFTS"
  }
]
  /v1/metrics/asset/current:
    get:
      tags:
        - Metrics
      summary: Current metrics for given asset
      description: Get current asset metrics.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          schema:
            type: string
        - name: asset_id
          in: query
          description: Asset identifier (from the Metadata -> Assets)
          schema:
            type: string
        - name: asset_id_external
          in: query
          description: Exchange asset identifier
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange identifier (from the Metadata -> Exchanges)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.GeneralData'
              examples:
                Example response:
                  value: [
  {
    "entry_time": "2023-06-16T07:55:07.2787756Z",
    "recv_time": "2023-06-16T07:55:07.0010000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE",
    "value_decimal": 0.0086
  },
  {
    "entry_time": "2023-06-26T07:05:39.9865633Z",
    "recv_time": "2023-06-26T07:05:39.9000000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "IV_UNDERLYING_PRICE",
    "value_decimal": 30743.29
  },
  {
    "entry_time": "2023-06-26T07:05:17.0768012Z",
    "recv_time": "2023-06-26T07:05:16.8420000Z",
    "exchange_id": "DERIBIT",
    "metric_id": "DERIVATIVES_MARK_PRICE_IV",
    "value_decimal": 60.77
  }
]
  /v1/metrics/asset/history:
    get:
      tags:
        - Metrics
      summary: Historical metrics for asset
      description: Get asset metrics history.
      parameters:
        - name: metric_id
          in: query
          description: Metric identifier (from the Metrics -> Listing)
          required: true
          schema:
            type: string
        - name: asset_id
          in: query
          description: Asset identifier (from the Metadata -> Assets)
          schema:
            type: string
        - name: asset_id_external
          in: query
          description: Exchange asset identifier
          schema:
            type: string
        - name: exchange_id
          in: query
          description: Exchange identifier (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
        - name: time_start
          in: query
          description: Starting time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_end
          in: query
          description: Ending time in ISO 8601
          schema:
            type: string
            format: date-time
        - name: time_format
          in: query
          description: 'If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)'
          schema:
            type: string
        - name: period_id
          in: query
          description: 'Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`'
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MetricData'
  '/v1/options/{exchange_id}/current':
    get:
      tags:
        - Options
      summary: Current data by Exchange
      description: "Get current options data for a specific exchange.\r\n\r\nReturns option data grouped by underlying asset, quote currency, and expiration time,\r\nwith quotes for both calls and puts at each strike price."
      parameters:
        - name: exchange_id
          in: path
          description: Exchange identifier (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Options.OptionExchangeGroup'
              examples:
                Example response:
                  value: [
  {
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "underlying_price": 770.0,
    "time_expiration": "2013-09-28T22:40:50.0000000Z",
    "strikes": [
      {
        "strike_price": 770.0,
        "call": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        },
        "put": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        }
      }
    ]
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Options.OptionExchangeGroup'
              examples:
                Example response:
                  value: [
  {
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "underlying_price": 770.0,
    "time_expiration": "2013-09-28T22:40:50.0000000Z",
    "strikes": [
      {
        "strike_price": 770.0,
        "call": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        },
        "put": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        }
      }
    ]
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Options.OptionExchangeGroup'
              examples:
                Example response:
                  value: [
  {
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "underlying_price": 770.0,
    "time_expiration": "2013-09-28T22:40:50.0000000Z",
    "strikes": [
      {
        "strike_price": 770.0,
        "call": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        },
        "put": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        }
      }
    ]
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Options.OptionExchangeGroup'
              examples:
                Example response:
                  value: [
  {
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "underlying_price": 770.0,
    "time_expiration": "2013-09-28T22:40:50.0000000Z",
    "strikes": [
      {
        "strike_price": 770.0,
        "call": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        },
        "put": {
          "symbol_id": "DERIBIT_OPT_BTC-28SEP28_77000",
          "time_exchange": "0001-01-01T00:00:00.0000000Z",
          "time_coinapi": "0001-01-01T00:00:00.0000000Z",
          "ask_price": 770.0,
          "ask_size": 3252,
          "bid_price": 760,
          "bid_size": 124,
          "last_trade": {
            "time_exchange": "2017-03-18T22:42:21.3763342Z",
            "time_coinapi": "2017-03-18T22:42:21.3763342Z",
            "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
            "price": 770.0,
            "size": 0.05,
            "taker_side": "SELL"
          }
        }
      }
    ]
  }
]
  '/v1/orderbooks/{symbol_id}/depth/current':
    get:
      tags:
        - Order Book
      summary: Current depth of the order book
      description: Retrieves the current depth of the order book for the specified symbol.
      parameters:
        - name: symbol_id
          in: path
          description: The symbol ID (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit_levels
          in: query
          description: The maximum number of levels to include in the response.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.OrderBookDepth'
            application/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookDepth'
            text/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookDepth'
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.OrderBookDepth'
  '/v1/orderbooks/{symbol_id}/history':
    get:
      tags:
        - Order Book
      summary: Historical data
      description: "Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.\r\n            \r\n:::info\r\nThe historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.\r\n:::\r\n\r\n:::warning\r\nThe 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.\r\nPlease use the 'date' parameter instead for querying data for a specific day without filter.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier for requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: 'Date in ISO 8601, returned data is for the whole given day (preferred method, required if ''time_start'' is not provided)'
          schema:
            type: string
        - name: time_start
          in: query
          description: 'Starting time in ISO 8601 (deprecated, use ''date'' instead)'
          schema:
            type: string
        - name: time_end
          in: query
          description: 'Timeseries ending time in ISO 8601 (deprecated, use ''date'' instead)'
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: limit_levels
          in: query
          description: Maximum amount of levels from each side of the book to include in response (optional)
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
  '/v1/orderbooks/{symbol_id}/current':
    get:
      tags:
        - Order Book
      summary: Get current order book
      description: Retrieves the current order book for the specified symbol.
      parameters:
        - name: symbol_id
          in: path
          description: The symbol ID (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit_levels
          in: query
          description: The maximum number of levels to include in the response.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            application/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            text/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
  '/v1/orderbooks/{symbol_id}/latest':
    get:
      tags:
        - Order Book
      summary: Latest data
      description: "Get latest order book snapshots for a specific symbol, returned in time descending order.\r\n            \r\n:::info\r\nThe historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier of requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: limit_levels
          in: query
          description: Maximum amount of levels from each side of the book to include in response (optional)
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBook'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "asks": [
      {
        "price": 456.35,
        "size": 123
      },
      {
        "price": 456.36,
        "size": 23
      }
    ],
    "bids": [
      {
        "price": 456.1,
        "size": 42
      },
      {
        "price": 456.09,
        "size": 5
      }
    ]
  }
]
  /v1/orderbooks3/current:
    get:
      tags:
        - Order Book L3
      summary: Current order books
      parameters:
        - name: filter_symbol_id
          in: query
          description: Comma or semicolon delimited parts of symbol identifier used to filter the response.
          schema:
            type: string
        - name: limit_levels
          in: query
          description: The maximum number of levels to include in the response.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBookBase'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBookBase'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBookBase'
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.OrderBookBase'
  '/v1/orderbooks3/{symbol_id}/current':
    get:
      tags:
        - Order Book L3
      summary: Current order book by symbol_id
      description: Retrieves the current order book for the specified symbol.
      parameters:
        - name: symbol_id
          in: path
          description: The symbol ID (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit_levels
          in: query
          description: The maximum number of levels to include in the response.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            application/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            text/json:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.OrderBookBase'
              examples:
                Example response:
                  value: {
  "symbol_id": "COINBASE_SPOT_BCH_USD",
  "time_exchange": "2020-08-27T10:28:35.6111130Z",
  "time_coinapi": "2020-08-27T10:28:35.6766461Z",
  "asks": [
    {
      "id": "3c5e789c-4c84-448a-9c5d-50532ea1ccbb",
      "price": 272.89,
      "size": 1
    },
    {
      "id": "c64a76ba-5107-4c1b-b788-271ee88df318",
      "price": 272.9,
      "size": 18
    }
  ],
  "bids": [
    {
      "id": "100d5004-f4e0-4e92-a571-392403d5b073",
      "price": 272.83,
      "size": 18
    },
    {
      "id": "0889cf06-4a9d-4519-98e6-fac5dcb7afbf",
      "price": 272.83,
      "size": 0.64185083
    }
  ]
}
  '/v1/quotes/{symbol_id}/history':
    get:
      tags:
        - Quotes
      summary: Historical data
      description: "Get historical quote updates within requested time range, returned in time ascending order.\r\n\r\n:::warning\r\nThe 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.\r\nPlease use the 'date' parameter instead for querying data for a specific day without filter.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier for requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: 'Date in ISO 8601, returned data is for the whole given day (preferred method, required if ''time_start'' is not provided)'
          schema:
            type: string
        - name: time_start
          in: query
          description: Starting time in ISO 8601
          schema:
            type: string
        - name: time_end
          in: query
          description: Timeseries ending time in ISO 8601
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
  /v1/quotes/current:
    get:
      tags:
        - Quotes
      summary: Current data
      description: "Get current quotes for all symbols or for a specific symbol.\r\n            \r\n:::info\r\nWhen requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.\r\n:::"
      parameters:
        - name: filter_symbol_id
          in: query
          description: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
  '/v1/quotes/{symbol_id}/current':
    get:
      tags:
        - Quotes
      summary: Current quotes for a specific symbol
      parameters:
        - name: symbol_id
          in: path
          description: The symbol identifier (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            application/json:
              schema:
                $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            text/json:
              schema:
                $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/v1.QuoteTrade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124,
    "last_trade": {
      "time_exchange": "2017-03-18T22:42:21.3763342Z",
      "time_coinapi": "2017-03-18T22:42:21.3763342Z",
      "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
      "price": 770.0,
      "size": 0.05,
      "taker_side": "SELL"
    }
  }
]
  /v1/quotes/latest:
    get:
      tags:
        - Quotes
      summary: Latest data
      description: Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
      parameters:
        - name: filter_symbol_id
          in: query
          description: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
  '/v1/quotes/{symbol_id}/latest':
    get:
      tags:
        - Quotes
      summary: Latest quote updates for a specific symbol
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier of requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Quote'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "ask_price": 770.0,
    "ask_size": 3252,
    "bid_price": 760,
    "bid_size": 124
  }
]
  /v1/symbols:
    get:
      tags:
        - Metadata
      summary: List all symbols
      description: "Retrieves all symbols with optional filtering.\r\n            \r\n:::info\r\n\"price_precision\" and \"size_precision\" are data precisions and are not always the same precisions used for trading eg. for the \"BINANCE\" exchanges.\r\n:::\r\n            \r\n:::info\r\nYou should not assume that the market data will be always within the resolution provided by the \"price_precision\" and \"size_precision\". The fact that the precision values can be derived from a posterior implies the fact that this data could be delayed, also it can be changed by the data source without notice and we will immediately deliver data with the new precision while could not update the precision values in this endpoint immediately.\r\n:::\r\n            \r\n### Symbol identifier\r\n            \r\nOur symbol identifier is created using a pattern that depends on symbol type.\r\n            \r\nType | `symbol_id` pattern\r\n--------- | ---------\r\nSPOT | `{exchange_id}_SPOT_{asset_id_base}_{asset_id_quote}`\r\nFUTURES | `{exchange_id}_FTS_{asset_id_base}_{asset_id_quote}_{YYMMDD of future_delivery_time}`\r\nOPTION | `{exchange_id}_OPT_{asset_id_base}_{asset_id_quote}_{YYMMDD of option_expiration_time}_{option_strike_price}_{option_type_is_call as C/P}`\r\nPERPETUAL | `{exchange_id}_PERP_{asset_id_base}_{asset_id_quote}`\r\nINDEX | `{exchange_id}_IDX_{index_id}`\r\nCREDIT | `{exchange_id}_CRE_{asset_id_base}`\r\nCONTACT  | `{exchange_id}_COT_{contract_id}`\r\n            \r\n:::info\r\nIn the unlikely event when the \"symbol_id\" for more than one market is the same. We will append the additional term (prefixed with the \"_\") at the end of the duplicated identifiers to differentiate them.\r\n:::info\r\n            \r\n### Symbol types list (enumeration of `symbol_type` output variable)\r\n            \r\nType | Name | Description\r\n-------- | - | -----------\r\nSPOT | FX Spot | Agreement to exchange one asset for another one *(e.g. Buy BTC for USD)*\r\nFUTURES | Futures contract | FX Spot derivative contract where traders agree to trade fx spot at predetermined future time\r\nOPTION | Option contract | FX Spot derivative contract where traders agree to trade right to require buy or sell of fx spot at agreed price on exercise date\r\nPERPETUAL | Perpetual contract | FX Spot derivative contract where traders agree to trade fx spot continously without predetermined future delivery time\r\nINDEX | Index | Statistical composite that measures changes in the economy or markets.\r\nCREDIT | Credit/Funding | Margin funding contract. Order book displays lending offers and borrow bids. Price represents the daily rate.\r\nCONTRACT | Contract | Represents other types of financial instruments *(e.g. spreads, interest rate swap)*\r\n            \r\n### Additional output variables for `symbol_type = INDEX`\r\n            \r\nVariable | Description\r\n--------- | -----------\r\nindex_id | Index identifier\r\nindex_display_name | Human readable name of the index *(optional)*\r\nindex_display_description | Description of the index *(optional)*\r\n            \r\n### Additional output variables for `symbol_type = FUTURES`\r\n            \r\nVariable | Description\r\n--------- | -----------\r\nfuture_delivery_time | Predetermined time of futures contract delivery date in ISO 8601\r\nfuture_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*\r\nfuture_contract_unit_asset | Identifier of the asset used to denominate the contract unit\r\n            \r\n### Additional output variables for `symbol_type = PERPETUAL`\r\n            \r\nVariable | Description\r\n--------- | -----------\r\nfuture_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*\r\nfuture_contract_unit_asset | Identifier of the asset used to denominate the contract unit\r\n            \r\n### Additional output variables for `symbol_type = OPTION`\r\n            \r\nVariable | Description\r\n--------- | -----------\r\noption_type_is_call | Boolean value representing option type. `true` for Call options, `false` for Put options\r\noption_strike_price | Price at which option contract can be exercised\r\noption_contract_unit | Base asset amount of underlying spot which single option represents\r\noption_exercise_style | Option exercise style. Can be `EUROPEAN` or `AMERICAN`\r\noption_expiration_time | Option contract expiration time in ISO 8601\r\n            \r\n### Additional output variables for `symbol_type = CONTRACT`\r\n            \r\nVariable | Description\r\n--------- | -----------\r\ncontract_delivery_time | Predetermined time of contract delivery date in ISO 8601\r\ncontract_unit | Contact size *(eg. 10 BTC if `contract_unit` = `10` and `contract_unit_asset` = `BTC`)*\r\ncontract_unit_asset | Identifier of the asset used to denominate the contract unit\r\ncontract_id | Identifier of contract by the exchange"
      parameters:
        - name: filter_symbol_id
          in: query
          description: 'Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. `BITSTAMP`_ or `BINANCE_SPOT_`)'
          schema:
            type: string
        - name: filter_exchange_id
          in: query
          description: The filter for exchange ID.
          schema:
            type: string
        - name: filter_asset_id
          in: query
          description: The filter for asset ID.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
  '/v1/symbols/map/{exchange_id}':
    get:
      tags:
        - Metadata
      summary: List symbol mapping for the exchange
      parameters:
        - name: exchange_id
          in: path
          description: The ID of the exchange (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SymbolMapping'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SymbolMapping'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SymbolMapping'
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SymbolMapping'
  '/v1/symbols/{exchange_id}':
    get:
      tags:
        - Metadata
      summary: List of symbols for the exchange
      parameters:
        - name: exchange_id
          in: path
          description: The ID of the exchange (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
        - name: filter_symbol_id
          in: query
          description: The filter for symbol ID.
          schema:
            type: string
        - name: filter_asset_id
          in: query
          description: The filter for asset ID.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Symbol'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "KRAKENFTS_PERP_BTC_USD",
    "exchange_id": "KRAKENFTS",
    "symbol_type": "PERPETUAL",
    "asset_id_base": "BTC",
    "asset_id_quote": "USD",
    "asset_id_unit": "USD",
    "future_contract_unit": 1.000000000,
    "future_contract_unit_asset": "USD",
    "data_start": "2019-10-30",
    "data_end": "2021-03-03",
    "data_quote_start": "2019-10-30T16:53:10.3262317Z",
    "data_quote_end": "2021-03-03T13:51:45.6970000Z",
    "data_orderbook_start": "2019-10-30T16:53:10.3262317Z",
    "data_orderbook_end": "2020-08-05T14:37:32.0080000Z",
    "data_trade_start": "2019-10-30T16:38:52.1620000Z",
    "data_trade_end": "2021-03-03T13:46:25.7810000Z",
    "volume_1hrs": 22897091,
    "volume_1hrs_usd": 22897091.00,
    "volume_1day": 459390289,
    "volume_1day_usd": 459390289.00,
    "volume_1mth": 12875674995,
    "volume_1mth_usd": 12875674995.00,
    "price": 51266,
    "symbol_id_exchange": "pi_xbtusd",
    "asset_id_base_exchange": "XBT",
    "asset_id_quote_exchange": "USD",
    "price_precision": 0.100000000,
    "size_precision": 1.000000000
  },
  {
    "symbol_id": "POLONIEX_SPOT_LTC_USDC",
    "exchange_id": "POLONIEX",
    "symbol_type": "SPOT",
    "asset_id_base": "LTC",
    "asset_id_quote": "USDC",
    "data_start": "2018-11-20",
    "data_end": "2021-03-01",
    "data_quote_start": "2018-11-20T15:24:58.4128803Z",
    "data_quote_end": "2021-03-01T16:07:09.3475456Z",
    "data_orderbook_start": "2018-11-20T15:24:58.4128803Z",
    "data_orderbook_end": "2020-08-05T14:37:20.2695780Z",
    "data_trade_start": "2018-11-20T15:25:38.0000000Z",
    "data_trade_end": "2021-03-01T16:03:18.0000000Z",
    "volume_1hrs": 51.68645899,
    "volume_1hrs_usd": 9036.44,
    "volume_1day": 465.568863,
    "volume_1day_usd": 81396.28,
    "volume_1mth": 22528.27638495,
    "volume_1mth_usd": 3938661.00,
    "symbol_id_exchange": "USDC_LTC",
    "asset_id_base_exchange": "LTC",
    "asset_id_quote_exchange": "USDC",
    "price_precision": 0.000000010,
    "size_precision": 0.000000010
  }
]
  /v1/ohlcv/periods:
    get:
      tags:
        - Ohlcv
      summary: List all periods
      description: "Get full list of supported time periods available for requesting OHLCV timeseries data.\r\n            \r\n### Available periods\r\n            \r\nTime unit | Period identifiers\r\n--------- | -----------\r\nSecond | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC\r\nMinute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN\r\nHour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS\r\nDay | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY\r\nMonth | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH\r\nYear | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS\r\n            \r\n:::tip\r\nYou can assume that we will not remove any periods from this response, however, we may add new ones.\r\n:::"
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  },
  {
    "period_id": "2YRS",
    "length_seconds": 0,
    "length_months": 24,
    "unit_count": 2,
    "unit_name": "year",
    "display_name": "2 Years"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  },
  {
    "period_id": "2YRS",
    "length_seconds": 0,
    "length_months": 24,
    "unit_count": 2,
    "unit_name": "year",
    "display_name": "2 Years"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  },
  {
    "period_id": "2YRS",
    "length_seconds": 0,
    "length_months": 24,
    "unit_count": 2,
    "unit_name": "year",
    "display_name": "2 Years"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesPeriod'
              examples:
                Example response:
                  value: [
  {
    "period_id": "1SEC",
    "length_seconds": 1,
    "length_months": 0,
    "unit_count": 1,
    "unit_name": "second",
    "display_name": "1 Second"
  },
  {
    "period_id": "10DAY",
    "length_seconds": 864000,
    "length_months": 0,
    "unit_count": 10,
    "unit_name": "day",
    "display_name": "10 Days"
  },
  {
    "period_id": "2YRS",
    "length_seconds": 0,
    "length_months": 24,
    "unit_count": 2,
    "unit_name": "year",
    "display_name": "2 Years"
  }
]
  '/v1/ohlcv/{symbol_id}/history':
    get:
      tags:
        - Ohlcv
      summary: Historical data
      description: "Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data\r\n            \r\n:::info\r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier of requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: period_id
          in: query
          description: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)
          required: true
          schema:
            type: string
        - name: time_start
          in: query
          description: Timeseries starting time in ISO 8601
          schema:
            type: string
        - name: time_end
          in: query
          description: Timeseries ending time in ISO 8601
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: include_empty_items
          in: query
          description: 'Include items with no activity? (default value is `false`, possible values are `true` or `false`)'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-01-01T00:00:00.0000000Z",
    "time_period_end": "2017-01-02T00:00:00.0000000Z",
    "time_open": "2017-01-01T00:01:08.0000000Z",
    "time_close": "2017-01-01T23:59:46.0000000Z",
    "price_open": 966.34,
    "price_high": 1005.0,
    "price_low": 960.53,
    "price_close": 997.75,
    "volume_traded": 6850.59330859,
    "trades_count": 7815
  },
  {
    "time_period_start": "2017-01-02T00:00:00.0000000Z",
    "time_period_end": "2017-01-03T00:00:00.0000000Z",
    "time_open": "2017-01-02T00:00:05.0000000Z",
    "time_close": "2017-01-02T23:59:37.0000000Z",
    "price_open": 997.75,
    "price_high": 1032.0,
    "price_low": 990.01,
    "price_close": 1012.54,
    "volume_traded": 8167.38103018,
    "trades_count": 7871
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-01-01T00:00:00.0000000Z",
    "time_period_end": "2017-01-02T00:00:00.0000000Z",
    "time_open": "2017-01-01T00:01:08.0000000Z",
    "time_close": "2017-01-01T23:59:46.0000000Z",
    "price_open": 966.34,
    "price_high": 1005.0,
    "price_low": 960.53,
    "price_close": 997.75,
    "volume_traded": 6850.59330859,
    "trades_count": 7815
  },
  {
    "time_period_start": "2017-01-02T00:00:00.0000000Z",
    "time_period_end": "2017-01-03T00:00:00.0000000Z",
    "time_open": "2017-01-02T00:00:05.0000000Z",
    "time_close": "2017-01-02T23:59:37.0000000Z",
    "price_open": 997.75,
    "price_high": 1032.0,
    "price_low": 990.01,
    "price_close": 1012.54,
    "volume_traded": 8167.38103018,
    "trades_count": 7871
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-01-01T00:00:00.0000000Z",
    "time_period_end": "2017-01-02T00:00:00.0000000Z",
    "time_open": "2017-01-01T00:01:08.0000000Z",
    "time_close": "2017-01-01T23:59:46.0000000Z",
    "price_open": 966.34,
    "price_high": 1005.0,
    "price_low": 960.53,
    "price_close": 997.75,
    "volume_traded": 6850.59330859,
    "trades_count": 7815
  },
  {
    "time_period_start": "2017-01-02T00:00:00.0000000Z",
    "time_period_end": "2017-01-03T00:00:00.0000000Z",
    "time_open": "2017-01-02T00:00:05.0000000Z",
    "time_close": "2017-01-02T23:59:37.0000000Z",
    "price_open": 997.75,
    "price_high": 1032.0,
    "price_low": 990.01,
    "price_close": 1012.54,
    "volume_traded": 8167.38103018,
    "trades_count": 7871
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-01-01T00:00:00.0000000Z",
    "time_period_end": "2017-01-02T00:00:00.0000000Z",
    "time_open": "2017-01-01T00:01:08.0000000Z",
    "time_close": "2017-01-01T23:59:46.0000000Z",
    "price_open": 966.34,
    "price_high": 1005.0,
    "price_low": 960.53,
    "price_close": 997.75,
    "volume_traded": 6850.59330859,
    "trades_count": 7815
  },
  {
    "time_period_start": "2017-01-02T00:00:00.0000000Z",
    "time_period_end": "2017-01-03T00:00:00.0000000Z",
    "time_open": "2017-01-02T00:00:05.0000000Z",
    "time_close": "2017-01-02T23:59:37.0000000Z",
    "price_open": 997.75,
    "price_high": 1032.0,
    "price_low": 990.01,
    "price_close": 1012.54,
    "volume_traded": 8167.38103018,
    "trades_count": 7871
  }
]
  '/v1/ohlcv/exchanges/{exchange_id}/history':
    get:
      tags:
        - Ohlcv
      summary: Historical data by exchange
      description: "Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg `BITSTAMP`\r\n            \r\n:::info\r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\nThe difference between `time_end` and `time_start` cannot be higher than 1 day.\r\nThe `period_id` cannot be higher than `1DAY`.\r\n:::"
      parameters:
        - name: exchange_id
          in: path
          description: Exchange identifier of requested timeseries (from the Metadata -> Exchanges)
          required: true
          schema:
            type: string
        - name: period_id
          in: query
          description: Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`)
          required: true
          schema:
            type: string
        - name: time_start
          in: query
          description: Timeseries starting time in ISO 8601
          required: true
          schema:
            type: string
        - name: time_end
          in: query
          description: Timeseries ending time in ISO 8601
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.ExchangeTimeseriesItem'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.ExchangeTimeseriesItem'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.ExchangeTimeseriesItem'
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.ExchangeTimeseriesItem'
  '/v1/ohlcv/{symbol_id}/latest':
    get:
      tags:
        - Ohlcv
      summary: Latest data
      description: "Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data\r\n            \r\n:::info\r\nOHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters. \r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier of requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: period_id
          in: query
          description: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: include_empty_items
          in: query
          description: 'Include items with no activity? (default value is `false`, possible values are `true` or `false`)'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-08-09T14:31:00.0000000Z",
    "time_period_end": "2017-08-09T14:32:00.0000000Z",
    "time_open": "2017-08-09T14:31:01.0000000Z",
    "time_close": "2017-08-09T14:31:46.0000000Z",
    "price_open": 3255.59,
    "price_high": 3255.59,
    "price_low": 3244.74,
    "price_close": 3244.74,
    "volume_traded": 16.90327455,
    "trades_count": 31
  },
  {
    "time_period_start": "2017-08-09T14:30:00.0000000Z",
    "time_period_end": "2017-08-09T14:31:00.0000000Z",
    "time_open": "2017-08-09T14:30:05.0000000Z",
    "time_close": "2017-08-09T14:30:35.0000000Z",
    "price_open": 3256.0,
    "price_high": 3256.01,
    "price_low": 3247.0,
    "price_close": 3255.6,
    "volume_traded": 58.13139792,
    "trades_count": 33
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-08-09T14:31:00.0000000Z",
    "time_period_end": "2017-08-09T14:32:00.0000000Z",
    "time_open": "2017-08-09T14:31:01.0000000Z",
    "time_close": "2017-08-09T14:31:46.0000000Z",
    "price_open": 3255.59,
    "price_high": 3255.59,
    "price_low": 3244.74,
    "price_close": 3244.74,
    "volume_traded": 16.90327455,
    "trades_count": 31
  },
  {
    "time_period_start": "2017-08-09T14:30:00.0000000Z",
    "time_period_end": "2017-08-09T14:31:00.0000000Z",
    "time_open": "2017-08-09T14:30:05.0000000Z",
    "time_close": "2017-08-09T14:30:35.0000000Z",
    "price_open": 3256.0,
    "price_high": 3256.01,
    "price_low": 3247.0,
    "price_close": 3255.6,
    "volume_traded": 58.13139792,
    "trades_count": 33
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-08-09T14:31:00.0000000Z",
    "time_period_end": "2017-08-09T14:32:00.0000000Z",
    "time_open": "2017-08-09T14:31:01.0000000Z",
    "time_close": "2017-08-09T14:31:46.0000000Z",
    "price_open": 3255.59,
    "price_high": 3255.59,
    "price_low": 3244.74,
    "price_close": 3244.74,
    "volume_traded": 16.90327455,
    "trades_count": 31
  },
  {
    "time_period_start": "2017-08-09T14:30:00.0000000Z",
    "time_period_end": "2017-08-09T14:31:00.0000000Z",
    "time_open": "2017-08-09T14:30:05.0000000Z",
    "time_close": "2017-08-09T14:30:35.0000000Z",
    "price_open": 3256.0,
    "price_high": 3256.01,
    "price_low": 3247.0,
    "price_close": 3255.6,
    "volume_traded": 58.13139792,
    "trades_count": 33
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.TimeseriesItem'
              examples:
                Example response:
                  value: [
  {
    "time_period_start": "2017-08-09T14:31:00.0000000Z",
    "time_period_end": "2017-08-09T14:32:00.0000000Z",
    "time_open": "2017-08-09T14:31:01.0000000Z",
    "time_close": "2017-08-09T14:31:46.0000000Z",
    "price_open": 3255.59,
    "price_high": 3255.59,
    "price_low": 3244.74,
    "price_close": 3244.74,
    "volume_traded": 16.90327455,
    "trades_count": 31
  },
  {
    "time_period_start": "2017-08-09T14:30:00.0000000Z",
    "time_period_end": "2017-08-09T14:31:00.0000000Z",
    "time_open": "2017-08-09T14:30:05.0000000Z",
    "time_close": "2017-08-09T14:30:35.0000000Z",
    "price_open": 3256.0,
    "price_high": 3256.01,
    "price_low": 3247.0,
    "price_close": 3255.6,
    "volume_traded": 58.13139792,
    "trades_count": 33
  }
]
  '/v1/trades/{symbol_id}/history':
    get:
      tags:
        - Trades
      summary: Historical data
      description: "Get history transactions from specific symbol, returned in time ascending order.\r\n\r\n:::warning\r\nThe 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.\r\nPlease use the 'date' parameter instead for querying data for a specific day without filter.\r\n:::"
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier for requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: 'Date in ISO 8601, returned data is for the whole given day (required if ''time_start'' is not provided)'
          schema:
            type: string
        - name: time_start
          in: query
          description: Starting time in ISO 8601
          schema:
            type: string
        - name: time_end
          in: query
          description: Timeseries ending time in ISO 8601
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: include_id
          in: query
          description: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
  '/v1/trades/{symbol_id}/latest':
    get:
      tags:
        - Trades
      summary: Latest data by symbol_id
      description: Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
      parameters:
        - name: symbol_id
          in: path
          description: Symbol identifier for requested timeseries (from the Metadata -> Symbols)
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
        - name: include_id
          in: query
          description: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
  /v1/trades/latest:
    get:
      tags:
        - Trades
      summary: Latest data
      description: Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
      parameters:
        - name: filter_symbol_id
          in: query
          description: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
          schema:
            type: string
        - name: include_id
          in: query
          description: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
            application/x-msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Trade'
              examples:
                Example response:
                  value: [
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T22:40:50.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "770c7a3b-7258-4441-8182-83740f3e2457",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "BUY"
  },
  {
    "symbol_id": "BITSTAMP_SPOT_BTC_USD",
    "time_exchange": "2013-09-28T23:12:59.0000000Z",
    "time_coinapi": "2017-03-18T22:42:21.3763342Z",
    "uuid": "1ea8adc5-6459-47ca-adbf-0c3f8c729bb2",
    "price": 770.0,
    "size": 0.05,
    "taker_side": "SELL"
  }
]
components:
  schemas:
    Models.ExchangeTimeseriesItem:
      type: object
      properties:
        time_period_start:
          type: string
          description: The start time of the time period.
          format: date-time
        time_period_end:
          type: string
          description: The end time of the time period.
          format: date-time
        time_open:
          type: string
          description: The time when the price opened.
          format: date-time
          nullable: true
        time_close:
          type: string
          description: The time when the price closed.
          format: date-time
          nullable: true
        price_open:
          type: number
          description: The opening price.
          format: double
          nullable: true
        price_high:
          type: number
          description: The highest price during the time period.
          format: double
          nullable: true
        price_low:
          type: number
          description: The lowest price during the time period.
          format: double
          nullable: true
        price_close:
          type: number
          description: The closing price.
          format: double
          nullable: true
        volume_traded:
          type: number
          description: The total volume traded during the time period.
          format: double
        trades_count:
          type: integer
          description: The number of trades executed during the time period.
          format: int64
        symbol_id_exchange:
          type: string
          nullable: true
        symbol_id_coinapi:
          type: string
          nullable: true
      additionalProperties: false
      description: Represents a timeseries item with price and volume information.
    Options.OptionExchangeGroup:
      type: object
      properties:
        asset_id_base:
          type: string
          description: The base asset identifier.
          nullable: true
        asset_id_quote:
          type: string
          description: The quote asset identifier.
          nullable: true
        underlying_price:
          type: number
          description: The underlying price of the option.
          format: double
          nullable: true
        time_expiration:
          type: string
          description: The expiration time of the option.
          format: date-time
        strikes:
          type: array
          items:
            $ref: '#/components/schemas/Options.Strike'
          description: The list of strikes available.
          nullable: true
      additionalProperties: false
      description: Represents an option exchange group data model.
    Options.Strike:
      type: object
      properties:
        strike_price:
          type: number
          description: The strike price.
          format: double
        call:
          $ref: '#/components/schemas/v1.QuoteTrade'
        put:
          $ref: '#/components/schemas/v1.QuoteTrade'
      additionalProperties: false
      description: Represents a strike within the option exchange group.
    v1.Asset:
      type: object
      properties:
        asset_id:
          type: string
          description: Gets or sets the asset ID.
          nullable: true
        name:
          type: string
          description: Gets or sets the name of the asset.
          nullable: true
        type_is_crypto:
          type: integer
          description: Gets or sets a value indicating whether the asset is a cryptocurrency.
          format: int32
        data_quote_start:
          type: string
          description: Gets or sets the start date of quote data.
          format: date-time
          nullable: true
        data_quote_end:
          type: string
          description: Gets or sets the end date of quote data.
          format: date-time
          nullable: true
        data_orderbook_start:
          type: string
          description: Gets or sets the start date of order book data.
          format: date-time
          nullable: true
        data_orderbook_end:
          type: string
          description: Gets or sets the end date of order book data.
          format: date-time
          nullable: true
        data_trade_start:
          type: string
          description: Gets or sets the start date of trade data.
          format: date-time
          nullable: true
        data_trade_end:
          type: string
          description: Gets or sets the end date of trade data.
          format: date-time
          nullable: true
        data_symbols_count:
          type: integer
          description: Gets or sets the number of symbols.
          format: int64
          nullable: true
        volume_1hrs_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 hour.
          format: double
          nullable: true
        volume_1day_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 day.
          format: double
          nullable: true
        volume_1mth_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 month.
          format: double
          nullable: true
        price_usd:
          type: number
          description: Gets or sets the USD price of the asset.
          format: double
          nullable: true
        id_icon:
          type: string
          description: Gets or sets the ID of the icon for the asset.
          format: uuid
          nullable: true
        supply_current:
          type: number
          description: Gets or sets the current supply of the asset.
          format: double
          nullable: true
        supply_total:
          type: number
          description: Gets or sets the total supply of the asset.
          format: double
          nullable: true
        supply_max:
          type: number
          description: Gets or sets the maximum supply of the asset.
          format: double
          nullable: true
        chain_addresses:
          type: array
          items:
            $ref: '#/components/schemas/v1.ChainNetworkAddress'
          description: ''
          nullable: true
        data_start:
          type: string
          nullable: true
          readOnly: true
        data_end:
          type: string
          nullable: true
          readOnly: true
      additionalProperties: false
      description: Represents an asset.
    v1.ChainNetworkAddress:
      type: object
      properties:
        chain_id:
          type: string
          description: Gets or sets chain id
          nullable: true
        network_id:
          type: string
          description: Gets or sets network id
          nullable: true
        address:
          type: string
          description: Gets or sets chain address
          nullable: true
      additionalProperties: false
      description: Contains information about assets' chain network addresses
    v1.Exchange:
      type: object
      properties:
        exchange_id:
          type: string
          description: Gets or sets the exchange ID.
          nullable: true
        website:
          type: string
          description: Gets or sets the website URL of the exchange.
          nullable: true
        name:
          type: string
          description: Gets or sets the name of the exchange.
          nullable: true
        data_start:
          type: string
          nullable: true
          readOnly: true
        data_end:
          type: string
          nullable: true
          readOnly: true
        data_quote_start:
          type: string
          description: Gets or sets the start date of quote data.
          format: date-time
          nullable: true
        data_quote_end:
          type: string
          description: Gets or sets the end date of quote data.
          format: date-time
          nullable: true
        data_orderbook_start:
          type: string
          description: Gets or sets the start date of order book data.
          format: date-time
          nullable: true
        data_orderbook_end:
          type: string
          description: Gets or sets the end date of order book data.
          format: date-time
          nullable: true
        data_trade_start:
          type: string
          description: Gets or sets the start date of trade data.
          format: date-time
          nullable: true
        data_trade_end:
          type: string
          description: Gets or sets the end date of trade data.
          format: date-time
          nullable: true
        data_trade_count:
          type: integer
          description: Gets or sets the number of trades.
          format: int64
          nullable: true
        data_symbols_count:
          type: integer
          description: Gets or sets the number of symbols.
          format: int64
          nullable: true
        volume_1hrs_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 hour.
          format: double
          nullable: true
        volume_1day_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 day.
          format: double
          nullable: true
        volume_1mth_usd:
          type: number
          description: Gets or sets the USD volume in the last 1 month.
          format: double
          nullable: true
        metric_id:
          type: array
          items:
            type: string
          description: Gets or sets the list of metric IDs.
          nullable: true
        icons:
          type: array
          items:
            $ref: '#/components/schemas/v1.Icon'
          description: Gets or sets the list of icons for the exchange.
          nullable: true
          readOnly: true
        rank:
          type: number
          description: Rank of the exchange.
          format: double
        integration_status:
          type: string
          description: Status of the integration
          nullable: true
      additionalProperties: false
      description: Represents an exchange.
    v1.ExchangeRate:
      type: object
      properties:
        time:
          type: string
          description: Gets or sets the time of the exchange rate.
          format: date-time
        asset_id_base:
          type: string
          description: Gets or sets the base asset ID of the exchange rate.
          nullable: true
        asset_id_quote:
          type: string
          description: Gets or sets the quote asset ID of the exchange rate.
          nullable: true
        rate:
          type: number
          description: Gets or sets the exchange rate value.
          format: double
      additionalProperties: false
      description: Represents an exchange rate.
    v1.ExchangeRatesRate:
      type: object
      properties:
        time:
          type: string
          description: Gets or sets the time of the exchange rate.
          format: date-time
        asset_id_quote:
          type: string
          description: Gets or sets the quote asset ID of the exchange rate.
          nullable: true
        rate:
          type: number
          description: Gets or sets the exchange rate value.
          format: double
      additionalProperties: false
      description: Represents an exchange rate within a collection of exchange rates.
    v1.ExchangeRatesTimeseriesItem:
      type: object
      properties:
        time_period_start:
          type: string
          description: Gets or sets the start time of the period.
          format: date-time
        time_period_end:
          type: string
          description: Gets or sets the end time of the period.
          format: date-time
        time_open:
          type: string
          description: Gets or sets the opening time of the period.
          format: date-time
          nullable: true
        time_close:
          type: string
          description: Gets or sets the closing time of the period.
          format: date-time
          nullable: true
        rate_open:
          type: number
          description: Gets or sets the opening rate for the period.
          format: double
          nullable: true
        rate_high:
          type: number
          description: Gets or sets the highest rate for the period.
          format: double
          nullable: true
        rate_low:
          type: number
          description: Gets or sets the lowest rate for the period.
          format: double
          nullable: true
        rate_close:
          type: number
          description: Gets or sets the closing rate for the period.
          format: double
          nullable: true
      additionalProperties: false
      description: Represents an item in the exchange rate timeseries.
    v1.ExchangeRates`1:
      type: object
      properties:
        asset_id_base:
          type: string
          description: Gets or sets the base asset ID.
          nullable: true
        rates:
          type: array
          items:
            $ref: '#/components/schemas/v1.ExchangeRatesRate'
          description: Gets or sets the list of exchange rates.
          nullable: true
      additionalProperties: false
      description: Represents exchange rates for a specific base asset.
    v1.GeneralData:
      type: object
      properties:
        entry_time:
          type: string
          description: Gets or sets the entry time for the data point.
          format: date-time
        recv_time:
          type: string
          description: Gets or sets the received time for the data point.
          format: date-time
        exchange_id:
          type: string
          description: Gets or sets the identifier for the exchange.
          nullable: true
        asset_id:
          type: string
          description: Gets or sets the identifier for the asset.
          nullable: true
        symbol_id:
          type: string
          description: Gets or sets the identifier for the symbol.
          nullable: true
        metric_id:
          type: string
          description: Gets or sets the identifier for the metric.
          nullable: true
        value_decimal:
          type: number
          description: Gets or sets the decimal value for the metric.
          format: double
          nullable: true
        value_text:
          type: string
          description: Gets or sets the textual representation of the value for the metric.
          nullable: true
        value_time:
          type: string
          description: Gets or sets the timestamp value for the metric.
          format: date-time
          nullable: true
      additionalProperties: false
      description: Class representation of general metric data. This class is an XML type with name 'general_data' and inherits from the BaseCsvModel class.
    v1.Icon:
      type: object
      properties:
        exchange_id:
          type: string
          description: Gets or sets the exchange ID associated with the icon.
          nullable: true
        asset_id:
          type: string
          description: Gets or sets the asset ID associated with the icon.
          nullable: true
        url:
          type: string
          description: Gets or sets the URL of the icon.
          nullable: true
      additionalProperties: false
      description: Represents an icon.
    v1.LastTrade:
      type: object
      properties:
        time_exchange:
          type: string
          description: The exchange time of the last trade.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the last trade was received.
          format: date-time
        uuid:
          type: string
          description: The UUID of the last trade.
          format: uuid
        price:
          type: number
          description: The price of the last trade.
          format: double
        size:
          type: number
          description: The size of the last trade.
          format: double
        taker_side:
          type: string
          description: The taker side of the last trade.
          nullable: true
      additionalProperties: false
      description: Represents the last executed transaction.
    v1.ListingItem:
      type: object
      properties:
        metric_id:
          type: string
          description: Gets or sets the metric ID.
          nullable: true
        symbol_id:
          type: string
          description: Gets or sets the symbol ID.
          nullable: true
        symbol_id_external:
          type: string
          description: Gets or sets the symbol ID from the exchange.
          nullable: true
        exchange_id:
          type: string
          description: Gets or sets the exchange ID.
          nullable: true
        asset_id:
          type: string
          description: Gets or sets the asset ID.
          nullable: true
        asset_id_external:
          type: string
          description: Gets or sets the asset ID from the exchange.
          nullable: true
        chain_id:
          type: string
          description: Gets or sets the chain id.
          nullable: true
        network_id:
          type: string
          description: Gets or sets the network id.
          nullable: true
      additionalProperties: false
      description: Represents a listing item.
    v1.Metric:
      type: object
      properties:
        metric_id:
          type: string
          description: Gets or sets the metric ID.
          nullable: true
        description:
          type: string
          description: Gets or sets the metric description.
          nullable: true
      additionalProperties: false
      description: Represents a metric.
    v1.MetricData:
      type: object
      properties:
        symbol_id:
          type: string
          description: Gets or sets the symbol id.
          nullable: true
        time:
          type: string
          description: Gets or sets the time at which the value is recorded.
          format: date-time
        value:
          type: number
          description: Gets or sets the value of the metric.
          format: double
      additionalProperties: false
      description: Represents a data model for metric data.
    v1.OrderBook:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The exchange time of the order book.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the order book was received.
          format: date-time
        asks:
          description: The asks made by market makers.
          nullable: true
        bids:
          description: The bids made by market makers.
          nullable: true
      additionalProperties: false
      description: Represents an order book with additional information and functionality.
    v1.OrderBookBase:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The exchange time of the order book.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the order book was received.
          format: date-time
        asks:
          description: The asks made by market makers.
          nullable: true
        bids:
          description: The bids made by market makers.
          nullable: true
      additionalProperties: false
      description: Represents the base model for order book data.
    v1.OrderBookDepth:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The exchange time of the order book.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the order book was received.
          format: date-time
        ask_levels:
          type: integer
          description: The number of ask levels in the order book.
          format: int64
        bid_levels:
          type: integer
          description: The number of bid levels in the order book.
          format: int64
        ask_depth:
          type: number
          description: The depth of the ask side of the order book.
          format: double
        bid_depth:
          type: number
          description: The depth of the bid side of the order book.
          format: double
      additionalProperties: false
      description: Represents the depth of an order book.
    v1.Quote:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The exchange time of the quote.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the quote was received.
          format: date-time
        ask_price:
          type: number
          description: The best asking price.
          format: double
          nullable: true
        ask_size:
          type: number
          description: 'The volume resting on the best ask. If the value is equal to zero, then the size is unknown.'
          format: double
          nullable: true
        bid_price:
          type: number
          description: The best bidding price.
          format: double
          nullable: true
        bid_size:
          type: number
          description: 'The volume resting on the best bid. If the value is equal to zero, then the size is unknown.'
          format: double
          nullable: true
      additionalProperties: false
      description: Represents a quote data model.
    v1.QuoteTrade:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The exchange time of the quote trade.
          format: date-time
        time_coinapi:
          type: string
          description: The CoinAPI time when the quote trade was received.
          format: date-time
        ask_price:
          type: number
          description: The best asking price.
          format: double
          nullable: true
        ask_size:
          type: number
          description: 'The volume resting on the best ask. If the value is equal to zero, then the size is unknown.'
          format: double
          nullable: true
        bid_price:
          type: number
          description: The best bidding price.
          format: double
          nullable: true
        bid_size:
          type: number
          description: 'The volume resting on the best bid. If the value is equal to zero, then the size is unknown.'
          format: double
          nullable: true
        last_trade:
          $ref: '#/components/schemas/v1.LastTrade'
      additionalProperties: false
      description: Represents a quote trade data model.
    v1.Symbol:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        exchange_id:
          type: string
          description: The exchange identifier.
          nullable: true
        symbol_type:
          type: string
          description: The symbol type.
          nullable: true
        asset_id_base:
          type: string
          description: The base asset identifier.
          nullable: true
        asset_id_quote:
          type: string
          description: The quote asset identifier.
          nullable: true
        asset_id_unit:
          type: string
          description: The unit asset identifier.
          nullable: true
        future_contract_unit:
          type: number
          description: The contract unit for futures.
          format: double
          nullable: true
        future_contract_unit_asset:
          type: string
          description: The asset used as the unit for futures contract.
          nullable: true
        future_delivery_time:
          type: string
          description: The future delivery time for futures contract.
          format: date-time
          nullable: true
        option_type_is_call:
          type: boolean
          description: Indicates whether the option type is a call.
          nullable: true
        option_strike_price:
          type: number
          description: The strike price for options.
          format: double
          nullable: true
        option_contract_unit:
          type: number
          description: The contract unit for options.
          format: double
          nullable: true
        option_exercise_style:
          type: string
          description: The exercise style for options.
          nullable: true
        option_expiration_time:
          type: string
          description: The expiration time for options.
          format: date-time
          nullable: true
        contract_delivery_time:
          type: string
          description: The delivery time for contracts.
          format: date-time
          nullable: true
        contract_unit:
          type: number
          description: The contract unit for contracts.
          format: double
          nullable: true
        contract_unit_asset:
          type: string
          description: The asset used as the unit for contracts.
          nullable: true
        contract_id:
          type: string
          description: The contract identifier.
          nullable: true
        contract_display_name:
          type: string
          description: The display name of the contract.
          nullable: true
        contract_display_description:
          type: string
          description: The display description of the contract.
          nullable: true
        data_start:
          type: string
          nullable: true
          readOnly: true
        data_end:
          type: string
          nullable: true
          readOnly: true
        data_quote_start:
          type: string
          description: The start date of quote data.
          format: date-time
          nullable: true
        data_quote_end:
          type: string
          description: The end date of quote data.
          format: date-time
          nullable: true
        data_orderbook_start:
          type: string
          description: The start date of order book data.
          format: date-time
          nullable: true
        data_orderbook_end:
          type: string
          description: The end date of order book data.
          format: date-time
          nullable: true
        data_trade_start:
          type: string
          description: The start date of trade data.
          format: date-time
          nullable: true
        data_trade_end:
          type: string
          description: The end date of trade data.
          format: date-time
          nullable: true
        index_id:
          type: string
          description: The index identifier.
          nullable: true
        index_display_name:
          type: string
          description: The display name of the index.
          nullable: true
        index_display_description:
          type: string
          description: The display description of the index.
          nullable: true
        volume_1hrs:
          type: number
          description: The volume in the last 1 hour.
          format: double
          nullable: true
        volume_1hrs_usd:
          type: number
          description: The volume in USD in the last 1 hour.
          format: double
          nullable: true
        volume_1day:
          type: number
          description: The volume in the last 1 day.
          format: double
          nullable: true
        volume_1day_usd:
          type: number
          description: The volume in USD in the last 1 day.
          format: double
          nullable: true
        volume_1mth:
          type: number
          description: The volume in the last 1 month.
          format: double
          nullable: true
        volume_1mth_usd:
          type: number
          description: The volume in USD in the last 1 month.
          format: double
          nullable: true
        price:
          type: number
          description: The price.
          format: double
          nullable: true
        symbol_id_exchange:
          type: string
          description: The symbol identifier in the exchange.
          nullable: true
        asset_id_base_exchange:
          type: string
          description: The base asset identifier in the exchange.
          nullable: true
        asset_id_quote_exchange:
          type: string
          description: The quote asset identifier in the exchange.
          nullable: true
        price_precision:
          type: number
          description: The price precision.
          format: double
          nullable: true
        size_precision:
          type: number
          description: The size precision.
          format: double
          nullable: true
        raw_kvp:
          type: object
          additionalProperties:
            type: string
          description: Not normalized raw kvp data.
          nullable: true
        volume_to_usd:
          type: number
          description: Volume unit in USD.
          format: double
          nullable: true
      additionalProperties: false
      description: Represents a symbol data model.
    v1.SymbolMapping:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol ID.
          nullable: true
        symbol_id_exchange:
          type: string
          description: The exchange-specific symbol ID.
          nullable: true
        coinapi_datainfo_id:
          type: integer
          description: The CoinAPI DataInfo ID.
          format: int32
        asset_id_base_exchange:
          type: string
          description: The exchange-specific base asset ID.
          nullable: true
        asset_id_quote_exchange:
          type: string
          description: The exchange-specific quote asset ID.
          nullable: true
        asset_id_base:
          type: string
          description: The base asset ID.
          nullable: true
        asset_id_quote:
          type: string
          description: The quote asset ID.
          nullable: true
        price_precision:
          type: number
          description: The price precision.
          format: double
          nullable: true
        size_precision:
          type: number
          description: The size precision.
          format: double
          nullable: true
      additionalProperties: false
      description: Represents symbol mapping information for exchange symbols.
    v1.TimeseriesItem:
      type: object
      properties:
        time_period_start:
          type: string
          description: The start time of the time period.
          format: date-time
        time_period_end:
          type: string
          description: The end time of the time period.
          format: date-time
        time_open:
          type: string
          description: The time when the price opened.
          format: date-time
          nullable: true
        time_close:
          type: string
          description: The time when the price closed.
          format: date-time
          nullable: true
        price_open:
          type: number
          description: The opening price.
          format: double
          nullable: true
        price_high:
          type: number
          description: The highest price during the time period.
          format: double
          nullable: true
        price_low:
          type: number
          description: The lowest price during the time period.
          format: double
          nullable: true
        price_close:
          type: number
          description: The closing price.
          format: double
          nullable: true
        volume_traded:
          type: number
          description: The total volume traded during the time period.
          format: double
        trades_count:
          type: integer
          description: The number of trades executed during the time period.
          format: int64
      additionalProperties: false
      description: Represents a timeseries item with price and volume information.
    v1.TimeseriesPeriod:
      type: object
      properties:
        period_id:
          type: string
          description: The period ID.
          nullable: true
        length_seconds:
          type: integer
          description: The length of the period in seconds.
          format: int32
        length_months:
          type: integer
          description: The length of the period in months.
          format: int32
        unit_count:
          type: integer
          description: The unit count.
          format: int32
          nullable: true
        unit_name:
          type: string
          description: The unit name.
          nullable: true
        display_name:
          type: string
          description: The display name of the timeseries period.
          nullable: true
      additionalProperties: false
      description: Represents a timeseries period used in exchange rate data.
    v1.Trade:
      type: object
      properties:
        symbol_id:
          type: string
          description: The symbol identifier.
          nullable: true
        time_exchange:
          type: string
          description: The time of trade reported by the exchange.
          format: date-time
        time_coinapi:
          type: string
          description: The time when the trade was received by CoinAPI.
          format: date-time
        uuid:
          type: string
          description: The unique identifier for the trade.
          format: uuid
        price:
          type: number
          description: The price of the transaction.
          format: double
        size:
          type: number
          description: The base asset amount traded in the transaction.
          format: double
        taker_side:
          type: string
          description: The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).
          nullable: true
        id_trade:
          type: string
          description: The trade identifier.
          nullable: true
        id_order_maker:
          type: string
          description: The order maker identifier.
          nullable: true
        id_order_taker:
          type: string
          description: The order taker identifier.
          nullable: true
      additionalProperties: false
      description: Represents a trade executed on the exchange.
  securitySchemes:
    ApiKey:
      type: apiKey
      description: CoinApi API key needed to access the endpoints
      name: X-CoinAPI-Key
      in: header
security:
  - ApiKey: [ ]
tags:
  - name: Exchange Rates
    description: "\nExchange rate is defined as (VWAP-24H) last 24 hour (rolling window over time) Volume Weighted Average Price across multiple data sources listed on our platform. We are selecting and managing the data sources that are used in the calculation based on multiple factors to provide data of highest quality. \n\nAlgorithm is described below:\n\n  1. Exchange rates are produced from quotes, trades, and metadata datasets.\n  1. Symbols that are not data_type = \"SPOT\" are excluded from the calculation.\n  1. Symbols from the data sources that were marked by us as not legitimate are excluded from the calculation.\n  1. Quotes data where the spread is outside the range of ```<0$; 67%>``` are discarded. `spreadPrc = (ask - bid) / ((ask + bid) / 2)`\n  1. The midpoint from the quote data is used as a pricing reference and it's weighted by the passive cumulative volume resting on the best prices.\n  1. Volume from the trades is used to weight the midpoint prices in the VWAP24 algorithm.\n  1. Midpoint data that has not been updated in the last 5 minutes and 1 second is discarded.\n  1. The last 24-hour volume for each symbol is updated every 4 hours when approximately 20% of the data in the sliding window changes (also, the list of eligible markets is updated at the same time).\n  1. Everywhere in the algorithm below, we are using asset pairs only from exchanges that have the highest legitimacy rank, and the rest of the exchanges are discarded. As we establish the highest-ranking exchanges that have this data for each asset pair, we ensure that the highest quality data is used for each of them. The rank used for asset pairing is carried over to the following steps.\n  1. Every 1 second, we update VWAP24 data for every asset pair across all data sources.\n  1. For each asset pair, we also discard data that is outside the 3 sigma range if there are at least 3 exchanges for this asset pair.\n  1. From the VWAP24 data, we are creating a tree structure where node/vertex = asset and edge = rate.\n  1. By traversing the tree structure using the BFS algorithm and our secret sauce, we are able to establish the final exchange rates.\n    "
  - name: Order Book L3
    description: "\nThis section describes calls related to order book data, also known as books or passive level 3 data."
  - name: Order Book
    description: "\nThis section describes calls related to order book data, also known as books or passive level 2 data.\n\n:::info\nWhen requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.\n:::\n\n:::info\nGET `/v1/orderbooks/current` endpoint is charged one request per 100 data points returned after applying a filter defined by filter_symbol_id parameter. If filter symbols target more than one exchange, error is returned.\n:::\n\n:::info\nWhen requesting current order book data limited to a single level, then quotes are actually used. This information is important from the perspective that quotes data could be faster than order book data (behavior is dependent solely one the data source) and they can have the size equal to 0 when the size is unknown. Some data sources publish order books and separately quote data (without the sizes) at a higher frequency. In that case, we will merge the order book feed with quotes feed to make sure that our updates are as fast as possible. The quotes will have the size equal to 0 as the value is unknown and the customer can decide if these higher frequency updates without the sizes are valuable or if not then can discard them or ask for at least 2 order book levels (in case of a REST API call). For the data sources that publish order books only or order books and quotes with the sizes then this will not happen.\n:::"
  - name: Ohlcv
    description: "\nAPI calls described in this section are related to downloading OHLCV *(Open, High, Low, Close, Volume)* timeseries data.\nEach data point of this timeseries represents several indicators calculated from transactions activity inside a time range (period).\n\n:::info\nOHLCV data primary purpose is to present an overview of the market in human readable form. \nIt's often used to visualize market data on charts, websites, and various kinds of reports.\n:::\n\n:::tip\nCoinAPI expanded the standard OHLCV timeseries by including time of first and last trade and amount of trades executed inside period.\n:::\n    "
  - name: Metadata
    description: ''
  - name: Metrics
    description: "Metrics are quantitative measurements used to evaluate the performance and activity of cryptocurrency exchanges. These metrics include:\r\n\r\n1. Trading Volume: The total amount of cryptocurrency traded on an exchange within a specific time period, indicating liquidity and activity.\r\n1. Market Depth: The level of buy and sell orders at different price levels, providing insights into liquidity and potential price impact.\r\n1. Order Book: A record of outstanding buy and sell orders for a cryptocurrency, reflecting supply and demand dynamics.\r\n1. Spread: The difference between the highest bid and lowest ask prices, indicating liquidity and trading costs.\r\n1. Price Charts: Visual representations of cryptocurrency price movements over time, helping identify trends and inform trading decisions.\r\n1. Market Cap: The total value of a cryptocurrency calculated by its price multiplied by circulating supply, reflecting relative size and value.\r\n1. Trading Pairs: Combinations of cryptocurrencies available for trading, including volume, price, and spread for each pair.\r\n1. User Metrics: Data on active users, new registrations, user retention, and engagement, indicating platform popularity and growth.\r\n1. Trading Fees: Fees charged for executing trades, including fee structure, discounts, and revenue generated by the exchange.\r\n1. Security Metrics: Measures assessing the security of an exchange, such as past incidents, user fund protection, and security audits.\r\n\r\nThese metrics assist traders and investors in evaluating market activity, liquidity, and the reliability of crypto exchanges for informed decision-making."
  - name: Options
    description: This set of endpoints providing easy access to data related to Options Markets.
  - name: OrderBooks3
    description: Controller for managing order book L3 data.
  - name: OrderBooks
    description: Controller for managing order book data.
  - name: Quotes
    description: 'Controller for retrieving quotes data, also known as quotes or passive level 1 data.'
  - name: TimeSeries
    description: 'Controller for retrieving OHLCV (Open, High, Low, Close, Volume) timeseries data.'
  - name: Trades
    description: Controller for retrieving trade data related to executed transactions.
  - name: Assets
    description: Controller for accessing asset information.
  - name: Symbols
    description: Controller for retrieving symbol information.